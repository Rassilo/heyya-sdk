/**
 * HeyaAppLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const chai = require('chai');
const assert = chai.assert;
const TestHelper = require("../TestHelper");
const APIHelper = require("../../lib/APIHelper");
const testerlib = require("../../lib");
const testConfiguration = require("../TestBootstrap");

const controller = testerlib.FollowController;
const UserModel = testerlib.UserModel;
const UserPaginationModel = testerlib.UserPaginationModel;
const UserCreateModel = testerlib.UserCreateModel;
const UserUpdateModel = testerlib.UserUpdateModel;
const ErrorResponseException = testerlib.ErrorResponseException;
const UserUpdatePasswordModel = testerlib.UserUpdatePasswordModel;
const MediaModel = testerlib.MediaModel;
const PostModel = testerlib.PostModel;
const PostPaginationModel = testerlib.PostPaginationModel;
const PostCreateModel = testerlib.PostCreateModel;
const PostRegisterModel = testerlib.PostRegisterModel;
const PostCommentCreateModel = testerlib.PostCommentCreateModel;
const PostCommentUpdateModel = testerlib.PostCommentUpdateModel;
const MediaResource = testerlib.MediaResource;
const PostLikes = testerlib.PostLikes;
const Post = testerlib.Post;
const PostComment = testerlib.PostComment;
const Follows = testerlib.Follows;
const User = testerlib.User;
const PostCommentModel = testerlib.PostCommentModel;
const CommentsPaginationModel = testerlib.CommentsPaginationModel;
const LoginUserModel = testerlib.LoginUserModel;
const LoginResponseModel = testerlib.LoginResponseModel;
const CreateUserDto = testerlib.CreateUserDto;
const RoleEnum = testerlib.RoleEnum;
const Role3Enum = testerlib.Role3Enum;


describe("FollowController Tests", function tests() {
    this.timeout(testConfiguration.TEST_TIMEOUT);

    /**
     * Testcase for testing endpoint FollowController_getMyFollowers
     */
    it("should testTestFollowControllerGetMyFollowers response", function testTestFollowControllerGetMyFollowersTest(done) {
        // parameters for the API call
        let limit = null;
        let page = null;

        controller.getFollowControllerGetMyFollowers(limit, page, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = 'application/json';
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            done();
        }).catch(() => undefined);
    });

    /**
     * Testcase for testing endpoint FollowController_getMyFollowings
     */
    it("should testTestFollowControllerGetMyFollowings response", function testTestFollowControllerGetMyFollowingsTest(done) {
        // parameters for the API call
        let limit = null;
        let page = null;

        controller.getFollowControllerGetMyFollowings(limit, page, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            // test headers
            let headers = [];
            headers['Content-Type'] = 'application/json';
            assert.isTrue(TestHelper.areHeadersProperSubsetOf(headers, context.response.headers, true));
            done();
        }).catch(() => undefined);
    });

    /**
     * Testcase for testing endpoint FollowController_followUser
     */
    it("should testTestFollowControllerFollowUser response", function testTestFollowControllerFollowUserTest(done) {
        // parameters for the API call
        let id = null;

        controller.getFollowControllerFollowUser(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

    /**
     * Testcase for testing endpoint FollowController_removeFollowUser
     */
    it("should testTestFollowControllerRemoveFollowUser response", function testTestFollowControllerRemoveFollowUserTest(done) {
        // parameters for the API call
        let id = null;

        controller.deleteFollowControllerRemoveFollowUser(id, function callback(error, response, context) {
            // test response code
            assert.equal(200, context.response.statusCode);
            done();
        }).catch(() => undefined);
    });

});
